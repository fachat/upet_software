
; This program allows reading/writing blocks of memory (i.e. 256 bytes) from the flash chip
;
; available commands are
;
;	R 01234567 	read a block into buffer; display first 64 bytes
;	M [000]		display the memory in the buffer
;	W 01234567	write a block from memory to flash
;	: 000 01 [02...] overwrite buffer memory
;
; The program is using a flash access library in flashlib.a65
; API basically works by setting parameters in flashlib's external
; parameters where needed, and calling the appropriate function.

; -----------------------------------------
; standard routines

; display and input
STDOUT	=$ffd2
OSSTDIN	=$ffcf

; zeropage vars
sector_ptr	=$fe

; -----------------------------------------
; BASIC header

	.word $0401
	* = $0401

	.word link
	.word 10
	.byt $9e, "1040"
	.byt 0
link	.word 0
	.dsb $0410-*, $aa

; -----------------------------------------

	jsr flash_init

; -----------------------------------------
; prompt loop

prompt	.(
	lda #">"
	jsr STDOUT

@2	jsr STDIN
	cmp " "
	beq @2
	cmp #">"
	beq @2
	cmp #13
	beq endcmd

	ldy #cmds_e-cmds-1
@1	cmp cmds,y
	beq found
	dey
	bpl @1

&error	lda #"?"
	jsr STDOUT
&endcmd	jsr CRLF
	jmp prompt

found	tya
	asl
	tay
	lda cmds_a+1,y
	pha
	lda cmds_a,y
	pha
	rts

cmds	.byt "XR:MW",0
cmds_e	=*

cmds_a	.word cmdx-1, cmdr-1, cmdc-1, cmdm-1, cmdw-1

	.)

; -----------------------------------------

cmdc	.(
	jsr parse_hex
&err1	bcs error
	sta memory_address
	tya
	and #$0f
	sta memory_address+1

	jsr setup_sector_ptr
	
	ldy #0
@1	jsr parse_byte
	bcs nohex
	sta (sector_ptr),y
	iny
	cpy #8
	bne @1
	jmp endcmd
nohex	jmp error
	.)

cmdw	.(
	jsr parse_hex
	bcs err1
	sta sector_address
	sty sector_address+1

	jsr SPOUT
	lda #">"
	jsr STDOUT
	lda sector_address+1
	jsr HEXOUT
	lda sector_address
	jsr HEXOUT
	lda #"0"
	jsr STDOUT
	lda #0
	jsr HEXOUT

	jsr flash_write
	bcc @1
	pha
	lda #":"
	jsr STDOUT
	pla
	jsr HEXOUT
@1
	jmp endcmd
	.)

cmdr	.(
	jsr parse_hex
	bcs err1
	sta sector_address
	sty sector_address+1

	jsr SPOUT
	lda #">"
	jsr STDOUT
	lda sector_address+1
	jsr HEXOUT
	lda sector_address
	jsr HEXOUT
	lda #"0"
	jsr STDOUT
	lda #0
	jsr HEXOUT

	jsr flash_read

	lda #0
	sta memory_address
	sta memory_address+1
	
	jsr display_memory
	jmp endcmd
	.)

cmdx	.(
	rts
	.)

cmdm	.(
	jsr parse_hex
	bcs no_addr
	sta memory_address
	tya
	and #$0f		; 4k blocks
	sta memory_address+1
no_addr
	lda #">"
	jsr STDOUT
	lda memory_address+1
	jsr HEXOUT
	lda memory_address
	jsr HEXOUT

	jsr display_memory
	jmp endcmd
	.)


; -----------------------------------------

setup_sector_ptr .(
	lda memory_address
	clc
	adc #<sector_buffer
	sta sector_ptr
	lda memory_address+1
	adc #>sector_buffer
	sta sector_ptr+1
	rts
	.)

display_memory .(
	jsr CRLF

	lda #8			; 8 lines with 8 bytes each
	sta tmp

@2	lda #">"
	jsr STDOUT
	lda #":"
	jsr STDOUT

	lda memory_address+1
	jsr NIBOUT
	lda memory_address
	jsr HEXOUT

	ldx #8		; 8 bytes
	ldy #0
@1	
	jsr setup_sector_ptr

	jsr SPOUT
	lda (sector_ptr),y
	jsr HEXOUT

	; inc pointer
	inc memory_address
	bne @3
	; upper byte
	lda memory_address+1
	inc memory_address+1
	; check if 4k boundary is crossed?
	eor memory_address+1
	and #$f0
	beq @3
	lda #0
	sta memory_address+1
@3
	; all 8 bytes?
	dex
	bne @1
	jsr CRLF
	dec tmp
	bne @2
	rts
	.)

; -----------------------------------------

parse_byte .(
	sty tmp
	lda lastin
	cmp #13
	beq @1
	jsr parse_hex
	ldy tmp
@1	rts
@2	sec
	rts
	.)

parse_hex .(
	lda #0
	sta tmpw
	sta tmpw+1

@4	jsr STDIN
	jsr ISHEX
	bcc @3
	cmp #" "
	beq @4
	sec
	rts

@2	jsr STDIN
@3	jsr HEX2BIN
	bcs nohex
	asl
	asl
	asl
	asl
	asl
	rol tmpw
	rol tmpw+1
	asl
	rol tmpw
	rol tmpw+1
	asl
	rol tmpw
	rol tmpw+1
	asl
	rol tmpw
	rol tmpw+1
	beq @2
nohex	clc
	lda tmpw
	ldy tmpw+1
	rts
	.)

HEX2BIN	.(
	jsr ISHEX
	bcs @2
	; moves "0"-"9" to 0-9
	sbc #"0"-1	; -1 as C=0
	cmp #9+1
	bcc @1
	sbc #7
@1	clc
@2	rts
	.)

ISHEX	.(
	cmp #"0"
	bcc nohex
	cmp #"9"+1
	bcc hex
	cmp #"A"
	bcc nohex
	cmp #"F"+1
	bcc hex
nohex	sec
	rts
hex	clc
	rts
	.)

HEXOUT	.(
	pha
	lsr
	lsr
	lsr
	lsr
	jsr nib
	pla
&NIBOUT	and #$0f
nib	cmp #10
	bcc digit
	adc #"A"-"9"-1-1
digit	adc #"0"
	jmp STDOUT
	.)

CRLF	.(
	lda #13
	jsr STDOUT
	lda #10
	jmp STDOUT
	.)

SPOUT	lda #" "
	jmp STDOUT

STDIN	jsr OSSTDIN
	sta lastin
	rts

; -----------------------------------------

	.include "flashlib.a65"

; -----------------------------------------

lastin		.byt 0
tmp		.byt 0
tmpw		.word 0
memory_address	.word 0
sector_address	.word 0
byte_counter	.word 0

sector_buffer	=*
	
