
; first test of I2C functionality.
; just sends bytes to address 01

I2C		=$e80c

I2C_STATUS	=0
I2C_TIMEOUT	=0
I2C_DATA	=1
I2C_OWNADDR	=2
I2C_CTRL	=3

I2C_C_AA	=%10000000
I2C_C_ENSIO	=%01000000
I2C_C_STA	=%00100000
I2C_C_STO	=%00010000
I2C_C_SI	=%00001000

; other device
ADDR		= 1

	.word $033c
	*=$033c

	sei

	lda #$ff
	sta I2C + I2C_TIMEOUT

	lda #64
	sta I2C + I2C_OWNADDR
	
	lda #I2C_C_ENSIO
	sta I2C + I2C_CTRL

	.(			; wait 500u
	ldx #100
wait	dex
	bne wait
	.)

	lda #I2C_C_ENSIO | I2C_C_STA | I2C_C_AA
	sta I2C + I2C_CTRL	; triggers SI serial interrupt with STA

	.(			; wait for SI
	lda #I2C_C_SI
wait	bit I2C + I2C_CTRL
	beq wait
	.)
	
	lda I2C + I2C_STATUS
	cmp #$08
	bne err08

	lda #(ADDR << 1)+0	; r/w bit = 0 -> write
	sta I2C + I2C_DATA

	lda #I2C_C_ENSIO | I2C_C_AA
	sta I2C + I2C_CTRL	; send address
	
	.(
	lda #I2C_C_SI
wait	bit I2C + I2C_CTRL
	beq wait
	.)

	lda I2C + I2C_STATUS
	cmp #$18
	bne err18

	; loop start

	lda #"a"
	sta I2C + I2C_DATA

	lda #I2C_C_ENSIO | I2C_C_AA
	sta I2C + I2C_CTRL	; send data

	.(
	lda #I2C_C_SI
wait	bit I2C + I2C_CTRL
	beq wait
	.)

	lda I2C + I2C_STATUS
	cmp #$28
	bne err28

	; check number of bytes (here = 1), go loop start if more

	lda #I2C_C_ENSIO | I2C_C_AA | I2C_C_STO
	sta I2C + I2C_CTRL	; generate stop condition

	; verify
	
	lda I2C + I2C_CTRL
	and #I2C_C_STO
	bne errsto

	lda #0
	.byt $2c
err08	ldx #$08
	.byt $2c
err18	ldx #$18
	.byt $2c
err28	ldx #$28
	.byt $2c
errsto	ldx #1

	ldy #0
	sty I2C + I2C_CTRL
	cli
	brk

